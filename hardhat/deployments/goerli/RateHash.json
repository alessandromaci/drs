{
  "address": "0x05356Cea19aEAa7C2A1Cd46397BA787321F00076",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotAllowedToRateYourself",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RateOutOfRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_txHash",
          "type": "bytes32"
        }
      ],
      "name": "TxHashAlreadyRated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "UserNotRegistered",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_txhash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_score",
          "type": "uint8"
        }
      ],
      "name": "NewRating",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "drs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_txHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_score",
          "type": "uint8"
        }
      ],
      "name": "rate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "registerNew",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x227aebbdd19de1802a21384fb989f083197e3c42e7616e255a7fb88d1737227b",
  "receipt": {
    "to": null,
    "from": "0xFB0aC8078982C876E894E35F5890652886b8c88B",
    "contractAddress": "0x05356Cea19aEAa7C2A1Cd46397BA787321F00076",
    "transactionIndex": 95,
    "gasUsed": "762049",
    "logsBloom": "0x
    "blockHash": "0xd870b07f6485f78cb5354ebf71296dbc71da2412cf77cfea92063204e268c132",
    "transactionHash": "0x227aebbdd19de1802a21384fb989f083197e3c42e7616e255a7fb88d1737227b",
    "logs": [],
    "blockNumber": 7909622,
    "cumulativeGasUsed": "12196313",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7383b894719d73b139d22603c2afffca34a53a76"
  ],
  "numDeployments": 1,
  "solcInputHash": "184d43ce10a1ceb6fcab0d273d83e2f2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotAllowedToRateYourself\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RateOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txHash\",\"type\":\"bytes32\"}],\"name\":\"TxHashAlreadyRated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"UserNotRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_txhash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_score\",\"type\":\"uint8\"}],\"name\":\"NewRating\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"drs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_txHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_score\",\"type\":\"uint8\"}],\"name\":\"rate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"registerNew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"rate(address,bytes32,uint8)\":{\"notice\":\"assign a rating to another valid address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RateHash.sol\":\"RateHash\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RateHash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./interface/IDRS.sol\\\";\\r\\nimport {Errors} from \\\"./lib/Errors.sol\\\";\\r\\nimport {DataTypes} from \\\"./lib/DataTypes.sol\\\";\\r\\n\\r\\ncontract RateHash {\\r\\n    // ========================================================\\r\\n    // STORAGE\\r\\n    // ========================================================\\r\\n\\r\\n    address public drs;\\r\\n    uint8 constant MIN_UINT = 0;\\r\\n    uint8 constant MAX_UINT = 100;\\r\\n\\r\\n    // ========================================================\\r\\n    // EVENTS\\r\\n    // ========================================================\\r\\n\\r\\n    event NewRating(\\r\\n        address _from,\\r\\n        address indexed _to,\\r\\n        bytes32 _txhash,\\r\\n        uint8 _score\\r\\n    );\\r\\n\\r\\n    // ========================================================\\r\\n    // UTILS METHODS\\r\\n    // ========================================================\\r\\n\\r\\n    /// @notice calculate the updated rating average for user\\r\\n    function setRating(\\r\\n        uint16 _oldRating,\\r\\n        uint16 _count,\\r\\n        uint16 _score\\r\\n    ) internal pure returns (uint8) {\\r\\n        // (old value* number of ratings) + new rating / total rate +1\\r\\n        uint16 newRating = ((_oldRating * _count) + _score) / (_count + 1);\\r\\n        return uint8(newRating);\\r\\n    }\\r\\n\\r\\n    constructor(address _address) {\\r\\n        drs = _address;\\r\\n    }\\r\\n\\r\\n    // ========================================================\\r\\n    // MAIN METHODS\\r\\n    // ========================================================\\r\\n\\r\\n    function registerNew(address _address) public {\\r\\n        IDRS(drs).register(_address);\\r\\n    }\\r\\n\\r\\n    /// @notice assign a rating to another valid address\\r\\n    function rate(\\r\\n        address _to,\\r\\n        bytes32 _txHash,\\r\\n        uint8 _score\\r\\n    ) external {\\r\\n        if (!IDRS(drs).registered(msg.sender)) {\\r\\n            revert Errors.UserNotRegistered(msg.sender);\\r\\n        }\\r\\n\\r\\n        if (!IDRS(drs).registered(_to)) {\\r\\n            revert Errors.UserNotRegistered(_to);\\r\\n        }\\r\\n\\r\\n        if (msg.sender == _to) {\\r\\n            revert Errors.NotAllowedToRateYourself();\\r\\n        }\\r\\n\\r\\n        if (_score < MIN_UINT || _score > MAX_UINT) {\\r\\n            revert Errors.RateOutOfRange();\\r\\n        }\\r\\n\\r\\n        if (IDRS(drs).hashRated(msg.sender, _txHash)) {\\r\\n            revert Errors.TxHashAlreadyRated(_txHash);\\r\\n        }\\r\\n\\r\\n        IDRS(drs).setHashRated(msg.sender, _txHash, true);\\r\\n\\r\\n        (uint16 count, uint8 oldRating) = IDRS(drs).hashRating(_to);\\r\\n        uint8 newRating = setRating(oldRating, count, _score);\\r\\n\\r\\n        DataTypes.Record memory record;\\r\\n        record.count = count + 1;\\r\\n        record.score = newRating;\\r\\n        IDRS(drs).setHashRating(_to, record);\\r\\n\\r\\n        emit NewRating(msg.sender, _to, _txHash, _score);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x818a36525dab87ed732a49f8135e1dcd27a8c590c2e036c6ddcc9bf5fc731f2c\",\"license\":\"MIT\"},\"contracts/interface/IDRS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../lib/DataTypes.sol\\\";\\r\\n\\r\\ninterface IDRS {\\r\\n    function register(address _address) external;\\r\\n\\r\\n    function registered(address _address) external returns (bool);\\r\\n\\r\\n    function hashRating(address _address)\\r\\n        external\\r\\n        returns (uint16 _count, uint8 _score);\\r\\n\\r\\n    function hashRated(address _address, bytes32 _hash)\\r\\n        external\\r\\n        returns (bool _rated);\\r\\n\\r\\n    function ensRating(address _address)\\r\\n        external\\r\\n        returns (uint16 _count, uint8 _score);\\r\\n\\r\\n    function ensRated(address _from, address _to)\\r\\n        external\\r\\n        returns (bool _rated);\\r\\n\\r\\n    function setHashRating(address _address, DataTypes.Record calldata record)\\r\\n        external;\\r\\n\\r\\n    function setHashRated(\\r\\n        address _address,\\r\\n        bytes32 _txHash,\\r\\n        bool _bool\\r\\n    ) external;\\r\\n\\r\\n    function setEnsRating(address _address, DataTypes.Record calldata record)\\r\\n        external;\\r\\n\\r\\n    function setEnsRated(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        bool _bool\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x59fead0ed3f7ce97642ea4174d80f2a10a6b172579af06b5bf6f670b96afd0f6\",\"license\":\"MIT\"},\"contracts/lib/DataTypes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    struct Record {\\r\\n        uint16 count;\\r\\n        uint8 score;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x559670ca8f5c93265e8f1cf94fdb478ada6cc379e0ffe69c18f56bbd9f65b0bb\",\"license\":\"MIT\"},\"contracts/lib/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary Errors {\\r\\n    error UserNotRegistered(address _account);\\r\\n    error AlreadyRegistered();\\r\\n    error NotAllowedToRateYourself();\\r\\n    error TxHashAlreadyRated(bytes32 _txHash);\\r\\n    error ENSAlreadyRated();\\r\\n    error ENSDomainNotFound();\\r\\n    error RateOutOfRange();\\r\\n}\\r\\n\",\"keccak256\":\"0x13cb9fbe0fab04917e32f7a007a904a3047f8eb26ad5e18ec21aa1aad65c3b6c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610d7b380380610d7b833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b610c64806101176000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80639a58394514610046578063a519fe5d14610062578063b6aeb7831461007e575b600080fd5b610060600480360381019061005b9190610839565b61009c565b005b61007c6004803603810190610077919061088c565b610656565b005b6100866106e4565b60405161009391906108c8565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b2dd5c07336040518263ffffffff1660e01b81526004016100f591906108c8565b6020604051808303816000875af1158015610114573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610138919061091b565b61017957336040517fae2730ca00000000000000000000000000000000000000000000000000000000815260040161017091906108c8565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b2dd5c07846040518263ffffffff1660e01b81526004016101d291906108c8565b6020604051808303816000875af11580156101f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610215919061091b565b61025657826040517fae2730ca00000000000000000000000000000000000000000000000000000000815260040161024d91906108c8565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036102bb576040517f7f04724a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060ff168160ff1610806102d65750606460ff168160ff16115b1561030d576040517f82e55d7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a1bcf4533846040518363ffffffff1660e01b8152600401610368929190610957565b6020604051808303816000875af1158015610387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ab919061091b565b156103ed57816040517f96227bcf0000000000000000000000000000000000000000000000000000000081526004016103e49190610980565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166388060f65338460016040518463ffffffff1660e01b815260040161044b939291906109aa565b600060405180830381600087803b15801561046557600080fd5b505af1158015610479573d6000803e3d6000fd5b5050505060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4257997866040518263ffffffff1660e01b81526004016104d991906108c8565b60408051808303816000875af11580156104f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051b9190610a30565b9150915060006105328260ff16848660ff16610708565b905061053c610746565b6001846105499190610a9f565b816000019061ffff16908161ffff168152505081816020019060ff16908160ff168152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350fec32088836040518363ffffffff1660e01b81526004016105c9929190610b22565b600060405180830381600087803b1580156105e357600080fd5b505af11580156105f7573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff167fe5b620428fc7d43c02b19c20e8d14edfef8ae8107119f3e4e4c1c1d99bda6d3933888860405161064593929190610b5a565b60405180910390a250505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634420e486826040518263ffffffff1660e01b81526004016106af91906108c8565b600060405180830381600087803b1580156106c957600080fd5b505af11580156106dd573d6000803e3d6000fd5b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806001846107189190610a9f565b8385876107259190610b91565b61072f9190610a9f565b6107399190610bfd565b9050809150509392505050565b6040518060400160405280600061ffff168152602001600060ff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107978261076c565b9050919050565b6107a78161078c565b81146107b257600080fd5b50565b6000813590506107c48161079e565b92915050565b6000819050919050565b6107dd816107ca565b81146107e857600080fd5b50565b6000813590506107fa816107d4565b92915050565b600060ff82169050919050565b61081681610800565b811461082157600080fd5b50565b6000813590506108338161080d565b92915050565b60008060006060848603121561085257610851610767565b5b6000610860868287016107b5565b9350506020610871868287016107eb565b925050604061088286828701610824565b9150509250925092565b6000602082840312156108a2576108a1610767565b5b60006108b0848285016107b5565b91505092915050565b6108c28161078c565b82525050565b60006020820190506108dd60008301846108b9565b92915050565b60008115159050919050565b6108f8816108e3565b811461090357600080fd5b50565b600081519050610915816108ef565b92915050565b60006020828403121561093157610930610767565b5b600061093f84828501610906565b91505092915050565b610951816107ca565b82525050565b600060408201905061096c60008301856108b9565b6109796020830184610948565b9392505050565b60006020820190506109956000830184610948565b92915050565b6109a4816108e3565b82525050565b60006060820190506109bf60008301866108b9565b6109cc6020830185610948565b6109d9604083018461099b565b949350505050565b600061ffff82169050919050565b6109f8816109e1565b8114610a0357600080fd5b50565b600081519050610a15816109ef565b92915050565b600081519050610a2a8161080d565b92915050565b60008060408385031215610a4757610a46610767565b5b6000610a5585828601610a06565b9250506020610a6685828601610a1b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610aaa826109e1565b9150610ab5836109e1565b9250828201905061ffff811115610acf57610ace610a70565b5b92915050565b610ade816109e1565b82525050565b610aed81610800565b82525050565b604082016000820151610b096000850182610ad5565b506020820151610b1c6020850182610ae4565b50505050565b6000606082019050610b3760008301856108b9565b610b446020830184610af3565b9392505050565b610b5481610800565b82525050565b6000606082019050610b6f60008301866108b9565b610b7c6020830185610948565b610b896040830184610b4b565b949350505050565b6000610b9c826109e1565b9150610ba7836109e1565b9250828202610bb5816109e1565b9150808214610bc757610bc6610a70565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c08826109e1565b9150610c13836109e1565b925082610c2357610c22610bce565b5b82820490509291505056fea26469706673582212205fcc0e3e0381dd2cc46cd7964f16b20eefc19eb077ed65daa1bd12666ea6fde064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80639a58394514610046578063a519fe5d14610062578063b6aeb7831461007e575b600080fd5b610060600480360381019061005b9190610839565b61009c565b005b61007c6004803603810190610077919061088c565b610656565b005b6100866106e4565b60405161009391906108c8565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b2dd5c07336040518263ffffffff1660e01b81526004016100f591906108c8565b6020604051808303816000875af1158015610114573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610138919061091b565b61017957336040517fae2730ca00000000000000000000000000000000000000000000000000000000815260040161017091906108c8565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b2dd5c07846040518263ffffffff1660e01b81526004016101d291906108c8565b6020604051808303816000875af11580156101f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610215919061091b565b61025657826040517fae2730ca00000000000000000000000000000000000000000000000000000000815260040161024d91906108c8565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036102bb576040517f7f04724a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060ff168160ff1610806102d65750606460ff168160ff16115b1561030d576040517f82e55d7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a1bcf4533846040518363ffffffff1660e01b8152600401610368929190610957565b6020604051808303816000875af1158015610387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ab919061091b565b156103ed57816040517f96227bcf0000000000000000000000000000000000000000000000000000000081526004016103e49190610980565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166388060f65338460016040518463ffffffff1660e01b815260040161044b939291906109aa565b600060405180830381600087803b15801561046557600080fd5b505af1158015610479573d6000803e3d6000fd5b5050505060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4257997866040518263ffffffff1660e01b81526004016104d991906108c8565b60408051808303816000875af11580156104f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051b9190610a30565b9150915060006105328260ff16848660ff16610708565b905061053c610746565b6001846105499190610a9f565b816000019061ffff16908161ffff168152505081816020019060ff16908160ff168152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350fec32088836040518363ffffffff1660e01b81526004016105c9929190610b22565b600060405180830381600087803b1580156105e357600080fd5b505af11580156105f7573d6000803e3d6000fd5b505050508673ffffffffffffffffffffffffffffffffffffffff167fe5b620428fc7d43c02b19c20e8d14edfef8ae8107119f3e4e4c1c1d99bda6d3933888860405161064593929190610b5a565b60405180910390a250505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634420e486826040518263ffffffff1660e01b81526004016106af91906108c8565b600060405180830381600087803b1580156106c957600080fd5b505af11580156106dd573d6000803e3d6000fd5b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806001846107189190610a9f565b8385876107259190610b91565b61072f9190610a9f565b6107399190610bfd565b9050809150509392505050565b6040518060400160405280600061ffff168152602001600060ff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107978261076c565b9050919050565b6107a78161078c565b81146107b257600080fd5b50565b6000813590506107c48161079e565b92915050565b6000819050919050565b6107dd816107ca565b81146107e857600080fd5b50565b6000813590506107fa816107d4565b92915050565b600060ff82169050919050565b61081681610800565b811461082157600080fd5b50565b6000813590506108338161080d565b92915050565b60008060006060848603121561085257610851610767565b5b6000610860868287016107b5565b9350506020610871868287016107eb565b925050604061088286828701610824565b9150509250925092565b6000602082840312156108a2576108a1610767565b5b60006108b0848285016107b5565b91505092915050565b6108c28161078c565b82525050565b60006020820190506108dd60008301846108b9565b92915050565b60008115159050919050565b6108f8816108e3565b811461090357600080fd5b50565b600081519050610915816108ef565b92915050565b60006020828403121561093157610930610767565b5b600061093f84828501610906565b91505092915050565b610951816107ca565b82525050565b600060408201905061096c60008301856108b9565b6109796020830184610948565b9392505050565b60006020820190506109956000830184610948565b92915050565b6109a4816108e3565b82525050565b60006060820190506109bf60008301866108b9565b6109cc6020830185610948565b6109d9604083018461099b565b949350505050565b600061ffff82169050919050565b6109f8816109e1565b8114610a0357600080fd5b50565b600081519050610a15816109ef565b92915050565b600081519050610a2a8161080d565b92915050565b60008060408385031215610a4757610a46610767565b5b6000610a5585828601610a06565b9250506020610a6685828601610a1b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610aaa826109e1565b9150610ab5836109e1565b9250828201905061ffff811115610acf57610ace610a70565b5b92915050565b610ade816109e1565b82525050565b610aed81610800565b82525050565b604082016000820151610b096000850182610ad5565b506020820151610b1c6020850182610ae4565b50505050565b6000606082019050610b3760008301856108b9565b610b446020830184610af3565b9392505050565b610b5481610800565b82525050565b6000606082019050610b6f60008301866108b9565b610b7c6020830185610948565b610b896040830184610b4b565b949350505050565b6000610b9c826109e1565b9150610ba7836109e1565b9250828202610bb5816109e1565b9150808214610bc757610bc6610a70565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c08826109e1565b9150610c13836109e1565b925082610c2357610c22610bce565b5b82820490509291505056fea26469706673582212205fcc0e3e0381dd2cc46cd7964f16b20eefc19eb077ed65daa1bd12666ea6fde064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "rate(address,bytes32,uint8)": {
        "notice": "assign a rating to another valid address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1932,
        "contract": "contracts/RateHash.sol:RateHash",
        "label": "drs",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}