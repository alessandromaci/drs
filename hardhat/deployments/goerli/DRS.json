{
  "address": "0x7383B894719d73b139d22603C2aFfFCa34a53a76",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "NewRegistration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ensContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ensRated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ensRating",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "count",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "score",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hashContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "hashRated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hashRating",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "count",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "score",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "setEnsRated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "count",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "score",
              "type": "uint8"
            }
          ],
          "internalType": "struct DataTypes.Record",
          "name": "record",
          "type": "tuple"
        }
      ],
      "name": "setEnsRating",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_txHash",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "setHashRated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "count",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "score",
              "type": "uint8"
            }
          ],
          "internalType": "struct DataTypes.Record",
          "name": "record",
          "type": "tuple"
        }
      ],
      "name": "setHashRating",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6f00a95880f4dc6f1a165d2d346f067cf743ce3d1ff50a354c0c5bc539f6122e",
  "receipt": {
    "to": null,
    "from": "0xFB0aC8078982C876E894E35F5890652886b8c88B",
    "contractAddress": "0x7383B894719d73b139d22603C2aFfFCa34a53a76",
    "transactionIndex": 53,
    "gasUsed": "3214823",
    "logsBloom": "0x
    "blockHash": "0x283d1a1563c6235e9e1e7e6eb14dbe630a142c4bd7cde36cd83704359ce84b64",
    "transactionHash": "0x6f00a95880f4dc6f1a165d2d346f067cf743ce3d1ff50a354c0c5bc539f6122e",
    "logs": [
      {
        "transactionIndex": 53,
        "blockNumber": 7904243,
        "transactionHash": "0x6f00a95880f4dc6f1a165d2d346f067cf743ce3d1ff50a354c0c5bc539f6122e",
        "address": "0x7383B894719d73b139d22603C2aFfFCa34a53a76",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xe59458b7a5303dd77a30fa0f72c23b33433ec33afd8d5095391880cb8e6a8675",
          "0x000000000000000000000000fe5deb7db9f5158f5ad3a2eb7354c10e3b45b0f4",
          "0x000000000000000000000000fb0ac8078982c876e894e35f5890652886b8c88b"
        ],
        "data": "0x",
        "logIndex": 120,
        "blockHash": "0x283d1a1563c6235e9e1e7e6eb14dbe630a142c4bd7cde36cd83704359ce84b64"
      },
      {
        "transactionIndex": 53,
        "blockNumber": 7904243,
        "transactionHash": "0x6f00a95880f4dc6f1a165d2d346f067cf743ce3d1ff50a354c0c5bc539f6122e",
        "address": "0x7383B894719d73b139d22603C2aFfFCa34a53a76",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xe59458b7a5303dd77a30fa0f72c23b33433ec33afd8d5095391880cb8e6a8675",
          "0x000000000000000000000000c82a04b48d715a0f0c33b3f197e7e5bfc20f6436",
          "0x000000000000000000000000fb0ac8078982c876e894e35f5890652886b8c88b"
        ],
        "data": "0x",
        "logIndex": 121,
        "blockHash": "0x283d1a1563c6235e9e1e7e6eb14dbe630a142c4bd7cde36cd83704359ce84b64"
      },
      {
        "transactionIndex": 53,
        "blockNumber": 7904243,
        "transactionHash": "0x6f00a95880f4dc6f1a165d2d346f067cf743ce3d1ff50a354c0c5bc539f6122e",
        "address": "0x7383B894719d73b139d22603C2aFfFCa34a53a76",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fb0ac8078982c876e894e35f5890652886b8c88b",
          "0x000000000000000000000000fb0ac8078982c876e894e35f5890652886b8c88b"
        ],
        "data": "0x",
        "logIndex": 122,
        "blockHash": "0x283d1a1563c6235e9e1e7e6eb14dbe630a142c4bd7cde36cd83704359ce84b64"
      }
    ],
    "blockNumber": 7904243,
    "cumulativeGasUsed": "9192302",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "184d43ce10a1ceb6fcab0d273d83e2f2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NewRegistration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ensRated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ensRating\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"score\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hashRated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hashRating\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"score\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setEnsRated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"score\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.Record\",\"name\":\"record\",\"type\":\"tuple\"}],\"name\":\"setEnsRating\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_txHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setHashRated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"count\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"score\",\"type\":\"uint8\"}],\"internalType\":\"struct DataTypes.Record\",\"name\":\"record\",\"type\":\"tuple\"}],\"name\":\"setHashRating\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"register(address)\":{\"notice\":\"assign a DRS domain to the address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DRS.sol\":\"DRS\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xf79be82c1a2eb0a77fba4e0972221912e803309081ca460fd2cf61653e55758a\"},\"@ensdomains/ens-contracts/contracts/registry/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(address owner, address resolver)\\n        external\\n        returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd6ba83973ffbab31dec17a716af3bb5703844d16dceb5078583fb2c509f8bcc2\"},\"@ensdomains/ens-contracts/contracts/registry/ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./ENS.sol\\\";\\nimport \\\"./IReverseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../root/Controllable.sol\\\";\\n\\nabstract contract NameResolver {\\n    function setName(bytes32 node, string memory name) public virtual;\\n}\\n\\nbytes32 constant lookup = 0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\nbytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n// namehash('addr.reverse')\\n\\ncontract ReverseRegistrar is Ownable, Controllable, IReverseRegistrar {\\n    ENS public immutable ens;\\n    NameResolver public defaultResolver;\\n\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n    event DefaultResolverChanged(NameResolver indexed resolver);\\n\\n    /**\\n     * @dev Constructor\\n     * @param ensAddr The address of the ENS registry.\\n     */\\n    constructor(ENS ensAddr) {\\n        ens = ensAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(\\n            ensAddr.owner(ADDR_REVERSE_NODE)\\n        );\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    modifier authorised(address addr) {\\n        require(\\n            addr == msg.sender ||\\n                controllers[msg.sender] ||\\n                ens.isApprovedForAll(addr, msg.sender) ||\\n                ownsContract(addr),\\n            \\\"ReverseRegistrar: Caller is not a controller or authorised by address or the address itself\\\"\\n        );\\n        _;\\n    }\\n\\n    function setDefaultResolver(address resolver) public override onlyOwner {\\n        require(\\n            address(resolver) != address(0),\\n            \\\"ReverseRegistrar: Resolver address must not be 0\\\"\\n        );\\n        defaultResolver = NameResolver(resolver);\\n        emit DefaultResolverChanged(NameResolver(resolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claim(address owner) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, owner, address(defaultResolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param addr The reverse record to set\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The resolver of the reverse node\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) public override authorised(addr) returns (bytes32) {\\n        bytes32 labelHash = sha3HexAddress(addr);\\n        bytes32 reverseNode = keccak256(\\n            abi.encodePacked(ADDR_REVERSE_NODE, labelHash)\\n        );\\n        emit ReverseClaimed(addr, reverseNode);\\n        ens.setSubnodeRecord(ADDR_REVERSE_NODE, labelHash, owner, resolver, 0);\\n        return reverseNode;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolver(address owner, address resolver)\\n        public\\n        override\\n        returns (bytes32)\\n    {\\n        return claimForAddr(msg.sender, owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public override returns (bytes32) {\\n        return\\n            setNameForAddr(\\n                msg.sender,\\n                msg.sender,\\n                address(defaultResolver),\\n                name\\n            );\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the account provided. Updates the resolver to a designated resolver\\n     * Only callable by controllers and authorised users\\n     * @param addr The reverse record to set\\n     * @param owner The owner of the reverse node\\n     * @param resolver The resolver of the reverse node\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) public override returns (bytes32) {\\n        bytes32 node = claimForAddr(addr, owner, resolver);\\n        NameResolver(resolver).setName(node, name);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ENS node hash.\\n     */\\n    function node(address addr) public pure override returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr))\\n            );\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n\\n    function ownsContract(address addr) internal view returns (bool) {\\n        try Ownable(addr).owner() returns (address owner) {\\n            return owner == msg.sender;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4430930561750d2de1163f7b7ba22ae003a7684394371e90a04374859a2337cf\"},\"@ensdomains/ens-contracts/contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController() {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0xb19b8c0fafe9ca2b4bf8aaafee486fa31437672e1e1977bdf84bfe03464969db\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/DRS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {Errors} from \\\"./lib/Errors.sol\\\";\\r\\nimport {DataTypes} from \\\"./lib/DataTypes.sol\\\";\\r\\nimport \\\"./interface/IDRS.sol\\\";\\r\\nimport \\\"./RateENS.sol\\\";\\r\\nimport \\\"./RateHash.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\ncontract DRS is IDRS, AccessControl {\\r\\n    // ========================================================\\r\\n    // STORAGE\\r\\n    // ========================================================\\r\\n\\r\\n    mapping(address => bool) public registered;\\r\\n\\r\\n    mapping(address => DataTypes.Record) public hashRating;\\r\\n    mapping(address => mapping(bytes32 => bool)) public hashRated;\\r\\n\\r\\n    mapping(address => DataTypes.Record) public ensRating;\\r\\n    mapping(address => mapping(address => bool)) public ensRated;\\r\\n\\r\\n    address public ensContract;\\r\\n    address public hashContract;\\r\\n\\r\\n    bytes32 internal constant CHILD_CONTRACT = keccak256(\\\"CHILD_CONTRACT\\\");\\r\\n\\r\\n    // ========================================================\\r\\n    // EVENTS\\r\\n    // ========================================================\\r\\n\\r\\n    event NewRegistration(address indexed _address);\\r\\n\\r\\n    // ========================================================\\r\\n    // UTILS METHODS\\r\\n    // ========================================================\\r\\n\\r\\n    function grantRole(address _address) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _grantRole(CHILD_CONTRACT, _address);\\r\\n    }\\r\\n\\r\\n    function setHashRating(address _address, DataTypes.Record calldata record)\\r\\n        external\\r\\n        onlyRole(CHILD_CONTRACT)\\r\\n    {\\r\\n        hashRating[_address] = record;\\r\\n    }\\r\\n\\r\\n    function setHashRated(\\r\\n        address _address,\\r\\n        bytes32 _txHash,\\r\\n        bool _bool\\r\\n    ) external onlyRole(CHILD_CONTRACT) {\\r\\n        hashRated[_address][_txHash] = _bool;\\r\\n    }\\r\\n\\r\\n    function setEnsRating(address _address, DataTypes.Record calldata record)\\r\\n        external\\r\\n        onlyRole(CHILD_CONTRACT)\\r\\n    {\\r\\n        ensRating[_address] = record;\\r\\n    }\\r\\n\\r\\n    function setEnsRated(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        bool _bool\\r\\n    ) external onlyRole(CHILD_CONTRACT) {\\r\\n        ensRated[_from][_to] = _bool;\\r\\n    }\\r\\n\\r\\n    // ========================================================\\r\\n    // MAIN METHODS\\r\\n    // ========================================================\\r\\n\\r\\n    constructor() {\\r\\n        RateENS ens = new RateENS(address(this));\\r\\n        RateHash hash = new RateHash(address(this));\\r\\n        _grantRole(CHILD_CONTRACT, address(ens));\\r\\n        _grantRole(CHILD_CONTRACT, address(hash));\\r\\n\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n\\r\\n        // just for testing\\r\\n        ensContract = address(ens);\\r\\n        hashContract = address(hash);\\r\\n    }\\r\\n\\r\\n    /// @notice assign a DRS domain to the address\\r\\n    function register(address _address) external onlyRole(CHILD_CONTRACT) {\\r\\n        if (registered[_address]) {\\r\\n            revert Errors.AlreadyRegistered();\\r\\n        }\\r\\n\\r\\n        registered[_address] = true;\\r\\n\\r\\n        emit NewRegistration(_address);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x757006ed4f246c855a28ac428a1ecaad70f7fde4adb9795d1e419736a446ec7d\",\"license\":\"MIT\"},\"contracts/RateENS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./interface/IDRS.sol\\\";\\r\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\r\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ReverseRegistrar.sol\\\";\\r\\nimport {DataTypes} from \\\"./lib/DataTypes.sol\\\";\\r\\nimport {Errors} from \\\"./lib/Errors.sol\\\";\\r\\n\\r\\ncontract RateENS {\\r\\n    // ========================================================\\r\\n    // STORAGE\\r\\n    // ========================================================\\r\\n\\r\\n    address private drs;\\r\\n    address private constant ens = 0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e;\\r\\n\\r\\n    uint8 constant MIN_UINT = 0;\\r\\n    uint8 constant MAX_UINT = 100;\\r\\n    bytes32 private constant ADDRESS_REVERSE_NODE =\\r\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\r\\n\\r\\n    // ========================================================\\r\\n    // EVENTS\\r\\n    // ========================================================\\r\\n\\r\\n    event NewRating(address _from, address indexed _to, uint8 _score);\\r\\n\\r\\n    // ========================================================\\r\\n    // UTILS METHODS\\r\\n    // ========================================================\\r\\n\\r\\n    constructor(address _drs) {\\r\\n        drs = _drs;\\r\\n    }\\r\\n\\r\\n    /// @notice calculate the updated rating average for user\\r\\n    function setRating(\\r\\n        uint16 _oldRating,\\r\\n        uint16 _count,\\r\\n        uint16 _score\\r\\n    ) internal pure returns (uint8) {\\r\\n        // (old value* number of ratings) + new rating / total rate +1\\r\\n        uint16 newRating = ((_oldRating * _count) + _score) / (_count + 1);\\r\\n        return uint8(newRating);\\r\\n    }\\r\\n\\r\\n    /// @notice inherithed by ENS\\r\\n    function setNode(address addr) private pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(ADDRESS_REVERSE_NODE, sha3HexAddress(addr))\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice inherithed by ENS\\r\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\r\\n        assembly {\\r\\n            for {\\r\\n                let i := 40\\r\\n            } gt(i, 0) {\\r\\n\\r\\n            } {\\r\\n                i := sub(i, 1)\\r\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\r\\n                addr := div(addr, 0x10)\\r\\n                i := sub(i, 1)\\r\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\r\\n                addr := div(addr, 0x10)\\r\\n            }\\r\\n\\r\\n            ret := keccak256(0, 40)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice check if the address has an ENS domain associated\\r\\n    /// @notice this function only tells if a record was ever set with this address. A more robust check will be done via subgraph\\r\\n    function hasENS(address _address) public view returns (bool) {\\r\\n        bytes32 node = setNode(_address);\\r\\n        return ENS(ens).recordExists(node);\\r\\n    }\\r\\n\\r\\n    // ========================================================\\r\\n    // MAIN METHODS\\r\\n    // ========================================================\\r\\n\\r\\n    function registerNew(address _address) external {\\r\\n        IDRS(drs).register(_address);\\r\\n    }\\r\\n\\r\\n    /// @notice assign a rating to another address with an ENS domain\\r\\n    function rate(address _to, uint8 _score) external {\\r\\n        if (!IDRS(drs).registered(msg.sender)) {\\r\\n            revert Errors.UserNotRegistered(msg.sender);\\r\\n        }\\r\\n\\r\\n        if (!IDRS(drs).registered(_to)) {\\r\\n            revert Errors.UserNotRegistered(_to);\\r\\n        }\\r\\n\\r\\n        if (msg.sender == _to) {\\r\\n            revert Errors.NotAllowedToRateYourself();\\r\\n        }\\r\\n\\r\\n        if (_score < MIN_UINT || _score > MAX_UINT) {\\r\\n            revert Errors.RateOutOfRange();\\r\\n        }\\r\\n\\r\\n        // not possible to assign a rating to an address that doesn't have an ENS domain\\r\\n        if (!hasENS(_to)) {\\r\\n            revert Errors.ENSDomainNotFound();\\r\\n        }\\r\\n\\r\\n        if (IDRS(drs).ensRated(msg.sender, _to)) {\\r\\n            revert Errors.ENSAlreadyRated();\\r\\n        }\\r\\n\\r\\n        IDRS(drs).setEnsRated(msg.sender, _to, true);\\r\\n\\r\\n        (uint16 count, uint8 oldRating) = IDRS(drs).ensRating(_to);\\r\\n        uint8 newRating = setRating(oldRating, count, _score);\\r\\n\\r\\n        DataTypes.Record memory record;\\r\\n        record.count = count + 1;\\r\\n        record.score = newRating;\\r\\n        IDRS(drs).setEnsRating(_to, record);\\r\\n\\r\\n        emit NewRating(msg.sender, _to, _score);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe9befe6d94c7a8c4dcf02197066b198acd9699f89e9d13d810dd15ba0db1fc20\",\"license\":\"MIT\"},\"contracts/RateHash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./interface/IDRS.sol\\\";\\r\\nimport {Errors} from \\\"./lib/Errors.sol\\\";\\r\\nimport {DataTypes} from \\\"./lib/DataTypes.sol\\\";\\r\\n\\r\\ncontract RateHash {\\r\\n    // ========================================================\\r\\n    // STORAGE\\r\\n    // ========================================================\\r\\n\\r\\n    address public drs;\\r\\n    uint8 constant MIN_UINT = 0;\\r\\n    uint8 constant MAX_UINT = 100;\\r\\n\\r\\n    // ========================================================\\r\\n    // EVENTS\\r\\n    // ========================================================\\r\\n\\r\\n    event NewRating(\\r\\n        address _from,\\r\\n        address indexed _to,\\r\\n        bytes32 _txhash,\\r\\n        uint8 _score\\r\\n    );\\r\\n\\r\\n    // ========================================================\\r\\n    // UTILS METHODS\\r\\n    // ========================================================\\r\\n\\r\\n    /// @notice calculate the updated rating average for user\\r\\n    function setRating(\\r\\n        uint16 _oldRating,\\r\\n        uint16 _count,\\r\\n        uint16 _score\\r\\n    ) internal pure returns (uint8) {\\r\\n        // (old value* number of ratings) + new rating / total rate +1\\r\\n        uint16 newRating = ((_oldRating * _count) + _score) / (_count + 1);\\r\\n        return uint8(newRating);\\r\\n    }\\r\\n\\r\\n    constructor(address _address) {\\r\\n        drs = _address;\\r\\n    }\\r\\n\\r\\n    // ========================================================\\r\\n    // MAIN METHODS\\r\\n    // ========================================================\\r\\n\\r\\n    function registerNew(address _address) public {\\r\\n        IDRS(drs).register(_address);\\r\\n    }\\r\\n\\r\\n    /// @notice assign a rating to another valid address\\r\\n    function rate(\\r\\n        address _to,\\r\\n        bytes32 _txHash,\\r\\n        uint8 _score\\r\\n    ) external {\\r\\n        if (!IDRS(drs).registered(msg.sender)) {\\r\\n            revert Errors.UserNotRegistered(msg.sender);\\r\\n        }\\r\\n\\r\\n        if (!IDRS(drs).registered(_to)) {\\r\\n            revert Errors.UserNotRegistered(_to);\\r\\n        }\\r\\n\\r\\n        if (msg.sender == _to) {\\r\\n            revert Errors.NotAllowedToRateYourself();\\r\\n        }\\r\\n\\r\\n        if (_score < MIN_UINT || _score > MAX_UINT) {\\r\\n            revert Errors.RateOutOfRange();\\r\\n        }\\r\\n\\r\\n        if (IDRS(drs).hashRated(msg.sender, _txHash)) {\\r\\n            revert Errors.TxHashAlreadyRated(_txHash);\\r\\n        }\\r\\n\\r\\n        IDRS(drs).setHashRated(msg.sender, _txHash, true);\\r\\n\\r\\n        (uint16 count, uint8 oldRating) = IDRS(drs).hashRating(_to);\\r\\n        uint8 newRating = setRating(oldRating, count, _score);\\r\\n\\r\\n        DataTypes.Record memory record;\\r\\n        record.count = count + 1;\\r\\n        record.score = newRating;\\r\\n        IDRS(drs).setHashRating(_to, record);\\r\\n\\r\\n        emit NewRating(msg.sender, _to, _txHash, _score);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x818a36525dab87ed732a49f8135e1dcd27a8c590c2e036c6ddcc9bf5fc731f2c\",\"license\":\"MIT\"},\"contracts/interface/IDRS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../lib/DataTypes.sol\\\";\\r\\n\\r\\ninterface IDRS {\\r\\n    function register(address _address) external;\\r\\n\\r\\n    function registered(address _address) external returns (bool);\\r\\n\\r\\n    function hashRating(address _address)\\r\\n        external\\r\\n        returns (uint16 _count, uint8 _score);\\r\\n\\r\\n    function hashRated(address _address, bytes32 _hash)\\r\\n        external\\r\\n        returns (bool _rated);\\r\\n\\r\\n    function ensRating(address _address)\\r\\n        external\\r\\n        returns (uint16 _count, uint8 _score);\\r\\n\\r\\n    function ensRated(address _from, address _to)\\r\\n        external\\r\\n        returns (bool _rated);\\r\\n\\r\\n    function setHashRating(address _address, DataTypes.Record calldata record)\\r\\n        external;\\r\\n\\r\\n    function setHashRated(\\r\\n        address _address,\\r\\n        bytes32 _txHash,\\r\\n        bool _bool\\r\\n    ) external;\\r\\n\\r\\n    function setEnsRating(address _address, DataTypes.Record calldata record)\\r\\n        external;\\r\\n\\r\\n    function setEnsRated(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        bool _bool\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x59fead0ed3f7ce97642ea4174d80f2a10a6b172579af06b5bf6f670b96afd0f6\",\"license\":\"MIT\"},\"contracts/lib/DataTypes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    struct Record {\\r\\n        uint16 count;\\r\\n        uint8 score;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x559670ca8f5c93265e8f1cf94fdb478ada6cc379e0ffe69c18f56bbd9f65b0bb\",\"license\":\"MIT\"},\"contracts/lib/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary Errors {\\r\\n    error UserNotRegistered(address _account);\\r\\n    error AlreadyRegistered();\\r\\n    error NotAllowedToRateYourself();\\r\\n    error TxHashAlreadyRated(bytes32 _txHash);\\r\\n    error ENSAlreadyRated();\\r\\n    error ENSDomainNotFound();\\r\\n    error RateOutOfRange();\\r\\n}\\r\\n\",\"keccak256\":\"0x13cb9fbe0fab04917e32f7a007a904a3047f8eb26ad5e18ec21aa1aad65c3b6c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80636881e763116100ad578063b2dd5c0711610071578063b2dd5c071461033f578063c39b3f111461036f578063d42579971461038b578063d547741f146103bc578063dbb5a0e3146103d85761012c565b80636881e763146102875780637a1bcf45146102a557806388060f65146102d557806391d14854146102f1578063a217fddf146103215761012c565b806336568abe116100f457806336568abe146101e757806338977686146102035780633c8783d91461021f5780634420e4861461024f57806350fec3201461026b5761012c565b806301ffc9a714610131578063084539c514610161578063248a9ca31461017d5780632f2ff15d146101ad5780632ff3e8f3146101c9575b600080fd5b61014b6004803603810190610146919061107c565b610409565b60405161015891906110c4565b60405180910390f35b61017b60048036038101906101769190611161565b610483565b005b610197600480360381019061019291906111d7565b610501565b6040516101a49190611213565b60405180910390f35b6101c760048036038101906101c2919061122e565b610520565b005b6101d1610541565b6040516101de919061127d565b60405180910390f35b61020160048036038101906101fc919061122e565b610567565b005b61021d60048036038101906102189190611298565b6105ea565b005b610239600480360381019061023491906112c5565b610625565b60405161024691906110c4565b60405180910390f35b61026960048036038101906102649190611298565b610654565b005b61028560048036038101906102809190611161565b6107a0565b005b61028f61081e565b60405161029c919061127d565b60405180910390f35b6102bf60048036038101906102ba9190611305565b610844565b6040516102cc91906110c4565b60405180910390f35b6102ef60048036038101906102ea9190611371565b610873565b005b61030b6004803603810190610306919061122e565b61090b565b60405161031891906110c4565b60405180910390f35b610329610975565b6040516103369190611213565b60405180910390f35b61035960048036038101906103549190611298565b61097c565b60405161036691906110c4565b60405180910390f35b610389600480360381019061038491906113c4565b61099c565b005b6103a560048036038101906103a09190611298565b610a60565b6040516103b3929190611450565b60405180910390f35b6103d660048036038101906103d1919061122e565b610a9f565b005b6103f260048036038101906103ed9190611298565b610ac0565b604051610400929190611450565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061047c575061047b82610aff565b5b9050919050565b7fe59458b7a5303dd77a30fa0f72c23b33433ec33afd8d5095391880cb8e6a86756104ad81610b69565b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081816104f99190611624565b905050505050565b6000806000838152602001908152602001600020600101549050919050565b61052982610501565b61053281610b69565b61053c8383610b7d565b505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61056f610c5d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d3906116b5565b60405180910390fd5b6105e68282610c65565b5050565b6000801b6105f781610b69565b6106217fe59458b7a5303dd77a30fa0f72c23b33433ec33afd8d5095391880cb8e6a867583610b7d565b5050565b60056020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b7fe59458b7a5303dd77a30fa0f72c23b33433ec33afd8d5095391880cb8e6a867561067e81610b69565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610702576040517f3a81d6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f894e56e1dac400b4475c83d8af0f0aa44de17c62764bd82f6e768a504e24246160405160405180910390a25050565b7fe59458b7a5303dd77a30fa0f72c23b33433ec33afd8d5095391880cb8e6a86756107ca81610b69565b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081816108169190611624565b905050505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b7fe59458b7a5303dd77a30fa0f72c23b33433ec33afd8d5095391880cb8e6a867561089d81610b69565b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60016020528060005260406000206000915054906101000a900460ff1681565b7fe59458b7a5303dd77a30fa0f72c23b33433ec33afd8d5095391880cb8e6a86756109c681610b69565b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b60026020528060005260406000206000915090508060000160009054906101000a900461ffff16908060000160029054906101000a900460ff16905082565b610aa882610501565b610ab181610b69565b610abb8383610c65565b505050565b60046020528060005260406000206000915090508060000160009054906101000a900461ffff16908060000160029054906101000a900460ff16905082565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610b7a81610b75610c5d565b610d46565b50565b610b87828261090b565b610c5957600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610bfe610c5d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b610c6f828261090b565b15610d4257600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610ce7610c5d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b610d50828261090b565b610ddf57610d758173ffffffffffffffffffffffffffffffffffffffff166014610de3565b610d838360001c6020610de3565b604051602001610d949291906117de565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd69190611862565b60405180910390fd5b5050565b606060006002836002610df691906118bd565b610e0091906118ff565b67ffffffffffffffff811115610e1957610e18611933565b5b6040519080825280601f01601f191660200182016040528015610e4b5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610e8357610e82611962565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610ee757610ee6611962565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610f2791906118bd565b610f3191906118ff565b90505b6001811115610fd1577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610f7357610f72611962565b5b1a60f81b828281518110610f8a57610f89611962565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080610fca90611991565b9050610f34565b5060008414611015576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100c90611a06565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61105981611024565b811461106457600080fd5b50565b60008135905061107681611050565b92915050565b6000602082840312156110925761109161101f565b5b60006110a084828501611067565b91505092915050565b60008115159050919050565b6110be816110a9565b82525050565b60006020820190506110d960008301846110b5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061110a826110df565b9050919050565b61111a816110ff565b811461112557600080fd5b50565b60008135905061113781611111565b92915050565b600080fd5b6000604082840312156111585761115761113d565b5b81905092915050565b600080606083850312156111785761117761101f565b5b600061118685828601611128565b925050602061119785828601611142565b9150509250929050565b6000819050919050565b6111b4816111a1565b81146111bf57600080fd5b50565b6000813590506111d1816111ab565b92915050565b6000602082840312156111ed576111ec61101f565b5b60006111fb848285016111c2565b91505092915050565b61120d816111a1565b82525050565b60006020820190506112286000830184611204565b92915050565b600080604083850312156112455761124461101f565b5b6000611253858286016111c2565b925050602061126485828601611128565b9150509250929050565b611277816110ff565b82525050565b6000602082019050611292600083018461126e565b92915050565b6000602082840312156112ae576112ad61101f565b5b60006112bc84828501611128565b91505092915050565b600080604083850312156112dc576112db61101f565b5b60006112ea85828601611128565b92505060206112fb85828601611128565b9150509250929050565b6000806040838503121561131c5761131b61101f565b5b600061132a85828601611128565b925050602061133b858286016111c2565b9150509250929050565b61134e816110a9565b811461135957600080fd5b50565b60008135905061136b81611345565b92915050565b60008060006060848603121561138a5761138961101f565b5b600061139886828701611128565b93505060206113a9868287016111c2565b92505060406113ba8682870161135c565b9150509250925092565b6000806000606084860312156113dd576113dc61101f565b5b60006113eb86828701611128565b93505060206113fc86828701611128565b925050604061140d8682870161135c565b9150509250925092565b600061ffff82169050919050565b61142e81611417565b82525050565b600060ff82169050919050565b61144a81611434565b82525050565b60006040820190506114656000830185611425565b6114726020830184611441565b9392505050565b61148281611417565b811461148d57600080fd5b50565b6000813561149d81611479565b80915050919050565b60008160001b9050919050565b600061ffff6114c1846114a6565b9350801983169250808416831791505092915050565b6000819050919050565b60006114fc6114f76114f284611417565b6114d7565b611417565b9050919050565b6000819050919050565b611516826114e1565b61152961152282611503565b83546114b3565b8255505050565b61153981611434565b811461154457600080fd5b50565b6000813561155481611530565b80915050919050565b60008160101b9050919050565b600062ff00006115798461155d565b9350801983169250808416831791505092915050565b60006115aa6115a56115a084611434565b6114d7565b611434565b9050919050565b6000819050919050565b6115c48261158f565b6115d76115d0826115b1565b835461156a565b8255505050565b6000810160008301806115f081611490565b90506115fc818461150d565b50505060008101602083018061161181611547565b905061161d81846115bb565b5050505050565b61162e82826115de565b5050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600061169f602f83611632565b91506116aa82611643565b604082019050919050565b600060208201905081810360008301526116ce81611692565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006117166017836116d5565b9150611721826116e0565b601782019050919050565b600081519050919050565b60005b8381101561175557808201518184015260208101905061173a565b60008484015250505050565b600061176c8261172c565b61177681856116d5565b9350611786818560208601611737565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006117c86011836116d5565b91506117d382611792565b601182019050919050565b60006117e982611709565b91506117f58285611761565b9150611800826117bb565b915061180c8284611761565b91508190509392505050565b6000601f19601f8301169050919050565b60006118348261172c565b61183e8185611632565b935061184e818560208601611737565b61185781611818565b840191505092915050565b6000602082019050818103600083015261187c8184611829565b905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118c882611884565b91506118d383611884565b92508282026118e181611884565b915082820484148315176118f8576118f761188e565b5b5092915050565b600061190a82611884565b915061191583611884565b925082820190508082111561192d5761192c61188e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061199c82611884565b9150600082036119af576119ae61188e565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006119f0602083611632565b91506119fb826119ba565b602082019050919050565b60006020820190508181036000830152611a1f816119e3565b905091905056fea264697066735822122099c73f5cbbd5cb2a5749d2d6b082212ebd241fd60b28722d33e015194c5baee364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "register(address)": {
        "notice": "assign a DRS domain to the address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 623,
        "contract": "contracts/DRS.sol:DRS",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)618_storage)"
      },
      {
        "astId": 1406,
        "contract": "contracts/DRS.sol:DRS",
        "label": "registered",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1411,
        "contract": "contracts/DRS.sol:DRS",
        "label": "hashRating",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Record)2247_storage)"
      },
      {
        "astId": 1417,
        "contract": "contracts/DRS.sol:DRS",
        "label": "hashRated",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 1422,
        "contract": "contracts/DRS.sol:DRS",
        "label": "ensRating",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Record)2247_storage)"
      },
      {
        "astId": 1428,
        "contract": "contracts/DRS.sol:DRS",
        "label": "ensRated",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1430,
        "contract": "contracts/DRS.sol:DRS",
        "label": "ensContract",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1432,
        "contract": "contracts/DRS.sol:DRS",
        "label": "hashContract",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_struct(Record)2247_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.Record)",
        "numberOfBytes": "32",
        "value": "t_struct(Record)2247_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)618_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)618_storage"
      },
      "t_struct(Record)2247_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Record",
        "members": [
          {
            "astId": 2244,
            "contract": "contracts/DRS.sol:DRS",
            "label": "count",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 2246,
            "contract": "contracts/DRS.sol:DRS",
            "label": "score",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)618_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 615,
            "contract": "contracts/DRS.sol:DRS",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 617,
            "contract": "contracts/DRS.sol:DRS",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}