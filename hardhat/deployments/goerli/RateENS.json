{
  "address": "0x654b0D590Bbf10974655B9E869A193d5e78c9120",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_drs",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ENSAlreadyRated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ENSDomainNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowedToRateYourself",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RateOutOfRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "UserNotRegistered",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_score",
          "type": "uint8"
        }
      ],
      "name": "NewRating",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasENS",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_score",
          "type": "uint8"
        }
      ],
      "name": "rate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "registerNew",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa97c637897171980665dc5d834ea7e2a00864f073c797eb35f1642982dee5565",
  "receipt": {
    "to": null,
    "from": "0xFB0aC8078982C876E894E35F5890652886b8c88B",
    "contractAddress": "0x654b0D590Bbf10974655B9E869A193d5e78c9120",
    "transactionIndex": 70,
    "gasUsed": "857671",
    "logsBloom": "0x
    "blockHash": "0xa0db3edddf1834c5993371ca8d7fbcdb7c73aee076bbe84f011d59523bff1310",
    "transactionHash": "0xa97c637897171980665dc5d834ea7e2a00864f073c797eb35f1642982dee5565",
    "logs": [],
    "blockNumber": 7909619,
    "cumulativeGasUsed": "5692821",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7383b894719d73b139d22603c2afffca34a53a76"
  ],
  "numDeployments": 1,
  "solcInputHash": "184d43ce10a1ceb6fcab0d273d83e2f2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_drs\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ENSAlreadyRated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ENSDomainNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowedToRateYourself\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RateOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"UserNotRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_score\",\"type\":\"uint8\"}],\"name\":\"NewRating\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasENS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_score\",\"type\":\"uint8\"}],\"name\":\"rate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"registerNew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"hasENS(address)\":{\"notice\":\"check if the address has an ENS domain associatedthis function only tells if a record was ever set with this address. A more robust check will be done via subgraph\"},\"rate(address,uint8)\":{\"notice\":\"assign a rating to another address with an ENS domain\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RateENS.sol\":\"RateENS\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xf79be82c1a2eb0a77fba4e0972221912e803309081ca460fd2cf61653e55758a\"},\"@ensdomains/ens-contracts/contracts/registry/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(address owner, address resolver)\\n        external\\n        returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd6ba83973ffbab31dec17a716af3bb5703844d16dceb5078583fb2c509f8bcc2\"},\"@ensdomains/ens-contracts/contracts/registry/ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./ENS.sol\\\";\\nimport \\\"./IReverseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../root/Controllable.sol\\\";\\n\\nabstract contract NameResolver {\\n    function setName(bytes32 node, string memory name) public virtual;\\n}\\n\\nbytes32 constant lookup = 0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\nbytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n// namehash('addr.reverse')\\n\\ncontract ReverseRegistrar is Ownable, Controllable, IReverseRegistrar {\\n    ENS public immutable ens;\\n    NameResolver public defaultResolver;\\n\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n    event DefaultResolverChanged(NameResolver indexed resolver);\\n\\n    /**\\n     * @dev Constructor\\n     * @param ensAddr The address of the ENS registry.\\n     */\\n    constructor(ENS ensAddr) {\\n        ens = ensAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(\\n            ensAddr.owner(ADDR_REVERSE_NODE)\\n        );\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    modifier authorised(address addr) {\\n        require(\\n            addr == msg.sender ||\\n                controllers[msg.sender] ||\\n                ens.isApprovedForAll(addr, msg.sender) ||\\n                ownsContract(addr),\\n            \\\"ReverseRegistrar: Caller is not a controller or authorised by address or the address itself\\\"\\n        );\\n        _;\\n    }\\n\\n    function setDefaultResolver(address resolver) public override onlyOwner {\\n        require(\\n            address(resolver) != address(0),\\n            \\\"ReverseRegistrar: Resolver address must not be 0\\\"\\n        );\\n        defaultResolver = NameResolver(resolver);\\n        emit DefaultResolverChanged(NameResolver(resolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claim(address owner) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, owner, address(defaultResolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param addr The reverse record to set\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The resolver of the reverse node\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) public override authorised(addr) returns (bytes32) {\\n        bytes32 labelHash = sha3HexAddress(addr);\\n        bytes32 reverseNode = keccak256(\\n            abi.encodePacked(ADDR_REVERSE_NODE, labelHash)\\n        );\\n        emit ReverseClaimed(addr, reverseNode);\\n        ens.setSubnodeRecord(ADDR_REVERSE_NODE, labelHash, owner, resolver, 0);\\n        return reverseNode;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolver(address owner, address resolver)\\n        public\\n        override\\n        returns (bytes32)\\n    {\\n        return claimForAddr(msg.sender, owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public override returns (bytes32) {\\n        return\\n            setNameForAddr(\\n                msg.sender,\\n                msg.sender,\\n                address(defaultResolver),\\n                name\\n            );\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the account provided. Updates the resolver to a designated resolver\\n     * Only callable by controllers and authorised users\\n     * @param addr The reverse record to set\\n     * @param owner The owner of the reverse node\\n     * @param resolver The resolver of the reverse node\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) public override returns (bytes32) {\\n        bytes32 node = claimForAddr(addr, owner, resolver);\\n        NameResolver(resolver).setName(node, name);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ENS node hash.\\n     */\\n    function node(address addr) public pure override returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr))\\n            );\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n\\n    function ownsContract(address addr) internal view returns (bool) {\\n        try Ownable(addr).owner() returns (address owner) {\\n            return owner == msg.sender;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4430930561750d2de1163f7b7ba22ae003a7684394371e90a04374859a2337cf\"},\"@ensdomains/ens-contracts/contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController() {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0xb19b8c0fafe9ca2b4bf8aaafee486fa31437672e1e1977bdf84bfe03464969db\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/RateENS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./interface/IDRS.sol\\\";\\r\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\r\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ReverseRegistrar.sol\\\";\\r\\nimport {DataTypes} from \\\"./lib/DataTypes.sol\\\";\\r\\nimport {Errors} from \\\"./lib/Errors.sol\\\";\\r\\n\\r\\ncontract RateENS {\\r\\n    // ========================================================\\r\\n    // STORAGE\\r\\n    // ========================================================\\r\\n\\r\\n    address private drs;\\r\\n    address private constant ens = 0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e;\\r\\n\\r\\n    uint8 constant MIN_UINT = 0;\\r\\n    uint8 constant MAX_UINT = 100;\\r\\n    bytes32 private constant ADDRESS_REVERSE_NODE =\\r\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\r\\n\\r\\n    // ========================================================\\r\\n    // EVENTS\\r\\n    // ========================================================\\r\\n\\r\\n    event NewRating(address _from, address indexed _to, uint8 _score);\\r\\n\\r\\n    // ========================================================\\r\\n    // UTILS METHODS\\r\\n    // ========================================================\\r\\n\\r\\n    constructor(address _drs) {\\r\\n        drs = _drs;\\r\\n    }\\r\\n\\r\\n    /// @notice calculate the updated rating average for user\\r\\n    function setRating(\\r\\n        uint16 _oldRating,\\r\\n        uint16 _count,\\r\\n        uint16 _score\\r\\n    ) internal pure returns (uint8) {\\r\\n        // (old value* number of ratings) + new rating / total rate +1\\r\\n        uint16 newRating = ((_oldRating * _count) + _score) / (_count + 1);\\r\\n        return uint8(newRating);\\r\\n    }\\r\\n\\r\\n    /// @notice inherithed by ENS\\r\\n    function setNode(address addr) private pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(ADDRESS_REVERSE_NODE, sha3HexAddress(addr))\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice inherithed by ENS\\r\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\r\\n        assembly {\\r\\n            for {\\r\\n                let i := 40\\r\\n            } gt(i, 0) {\\r\\n\\r\\n            } {\\r\\n                i := sub(i, 1)\\r\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\r\\n                addr := div(addr, 0x10)\\r\\n                i := sub(i, 1)\\r\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\r\\n                addr := div(addr, 0x10)\\r\\n            }\\r\\n\\r\\n            ret := keccak256(0, 40)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice check if the address has an ENS domain associated\\r\\n    /// @notice this function only tells if a record was ever set with this address. A more robust check will be done via subgraph\\r\\n    function hasENS(address _address) public view returns (bool) {\\r\\n        bytes32 node = setNode(_address);\\r\\n        return ENS(ens).recordExists(node);\\r\\n    }\\r\\n\\r\\n    // ========================================================\\r\\n    // MAIN METHODS\\r\\n    // ========================================================\\r\\n\\r\\n    function registerNew(address _address) external {\\r\\n        IDRS(drs).register(_address);\\r\\n    }\\r\\n\\r\\n    /// @notice assign a rating to another address with an ENS domain\\r\\n    function rate(address _to, uint8 _score) external {\\r\\n        if (!IDRS(drs).registered(msg.sender)) {\\r\\n            revert Errors.UserNotRegistered(msg.sender);\\r\\n        }\\r\\n\\r\\n        if (!IDRS(drs).registered(_to)) {\\r\\n            revert Errors.UserNotRegistered(_to);\\r\\n        }\\r\\n\\r\\n        if (msg.sender == _to) {\\r\\n            revert Errors.NotAllowedToRateYourself();\\r\\n        }\\r\\n\\r\\n        if (_score < MIN_UINT || _score > MAX_UINT) {\\r\\n            revert Errors.RateOutOfRange();\\r\\n        }\\r\\n\\r\\n        // not possible to assign a rating to an address that doesn't have an ENS domain\\r\\n        if (!hasENS(_to)) {\\r\\n            revert Errors.ENSDomainNotFound();\\r\\n        }\\r\\n\\r\\n        if (IDRS(drs).ensRated(msg.sender, _to)) {\\r\\n            revert Errors.ENSAlreadyRated();\\r\\n        }\\r\\n\\r\\n        IDRS(drs).setEnsRated(msg.sender, _to, true);\\r\\n\\r\\n        (uint16 count, uint8 oldRating) = IDRS(drs).ensRating(_to);\\r\\n        uint8 newRating = setRating(oldRating, count, _score);\\r\\n\\r\\n        DataTypes.Record memory record;\\r\\n        record.count = count + 1;\\r\\n        record.score = newRating;\\r\\n        IDRS(drs).setEnsRating(_to, record);\\r\\n\\r\\n        emit NewRating(msg.sender, _to, _score);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe9befe6d94c7a8c4dcf02197066b198acd9699f89e9d13d810dd15ba0db1fc20\",\"license\":\"MIT\"},\"contracts/interface/IDRS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../lib/DataTypes.sol\\\";\\r\\n\\r\\ninterface IDRS {\\r\\n    function register(address _address) external;\\r\\n\\r\\n    function registered(address _address) external returns (bool);\\r\\n\\r\\n    function hashRating(address _address)\\r\\n        external\\r\\n        returns (uint16 _count, uint8 _score);\\r\\n\\r\\n    function hashRated(address _address, bytes32 _hash)\\r\\n        external\\r\\n        returns (bool _rated);\\r\\n\\r\\n    function ensRating(address _address)\\r\\n        external\\r\\n        returns (uint16 _count, uint8 _score);\\r\\n\\r\\n    function ensRated(address _from, address _to)\\r\\n        external\\r\\n        returns (bool _rated);\\r\\n\\r\\n    function setHashRating(address _address, DataTypes.Record calldata record)\\r\\n        external;\\r\\n\\r\\n    function setHashRated(\\r\\n        address _address,\\r\\n        bytes32 _txHash,\\r\\n        bool _bool\\r\\n    ) external;\\r\\n\\r\\n    function setEnsRating(address _address, DataTypes.Record calldata record)\\r\\n        external;\\r\\n\\r\\n    function setEnsRated(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        bool _bool\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x59fead0ed3f7ce97642ea4174d80f2a10a6b172579af06b5bf6f670b96afd0f6\",\"license\":\"MIT\"},\"contracts/lib/DataTypes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    struct Record {\\r\\n        uint16 count;\\r\\n        uint8 score;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x559670ca8f5c93265e8f1cf94fdb478ada6cc379e0ffe69c18f56bbd9f65b0bb\",\"license\":\"MIT\"},\"contracts/lib/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary Errors {\\r\\n    error UserNotRegistered(address _account);\\r\\n    error AlreadyRegistered();\\r\\n    error NotAllowedToRateYourself();\\r\\n    error TxHashAlreadyRated(bytes32 _txHash);\\r\\n    error ENSAlreadyRated();\\r\\n    error ENSDomainNotFound();\\r\\n    error RateOutOfRange();\\r\\n}\\r\\n\",\"keccak256\":\"0x13cb9fbe0fab04917e32f7a007a904a3047f8eb26ad5e18ec21aa1aad65c3b6c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610f39380380610f39833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b610e22806101176000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806366e77fd914610046578063a519fe5d14610076578063f81cd4b014610092575b600080fd5b610060600480360381019061005b919061096d565b6100ae565b60405161006d91906109b5565b60405180910390f35b610090600480360381019061008b919061096d565b61014d565b005b6100ac60048036038101906100a79190610a09565b6101db565b005b6000806100ba836107c6565b90506e0c2e074ec69a0dfb2997ba6c7d2e1e73ffffffffffffffffffffffffffffffffffffffff1663f79fe538826040518263ffffffff1660e01b81526004016101049190610a62565b602060405180830381865afa158015610121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101459190610aa9565b915050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634420e486826040518263ffffffff1660e01b81526004016101a69190610ae5565b600060405180830381600087803b1580156101c057600080fd5b505af11580156101d4573d6000803e3d6000fd5b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b2dd5c07336040518263ffffffff1660e01b81526004016102349190610ae5565b6020604051808303816000875af1158015610253573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102779190610aa9565b6102b857336040517fae2730ca0000000000000000000000000000000000000000000000000000000081526004016102af9190610ae5565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b2dd5c07836040518263ffffffff1660e01b81526004016103119190610ae5565b6020604051808303816000875af1158015610330573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103549190610aa9565b61039557816040517fae2730ca00000000000000000000000000000000000000000000000000000000815260040161038c9190610ae5565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036103fa576040517f7f04724a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060ff168160ff1610806104155750606460ff168160ff16115b1561044c576040517f82e55d7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610455826100ae565b61048b576040517fbe58ee6200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633c8783d933846040518363ffffffff1660e01b81526004016104e6929190610b00565b6020604051808303816000875af1158015610505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105299190610aa9565b15610560576040517f7988071900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c39b3f11338460016040518463ffffffff1660e01b81526004016105be93929190610b29565b600060405180830381600087803b1580156105d857600080fd5b505af11580156105ec573d6000803e3d6000fd5b5050505060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dbb5a0e3856040518263ffffffff1660e01b815260040161064c9190610ae5565b60408051808303816000875af115801561066a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068e9190610baf565b9150915060006106a58260ff16848660ff16610823565b90506106af6108e9565b6001846106bc9190610c1e565b816000019061ffff16908161ffff168152505081816020019060ff16908160ff168152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663084539c587836040518363ffffffff1660e01b815260040161073c929190610ca1565b600060405180830381600087803b15801561075657600080fd5b505af115801561076a573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff167f359b6b955e4279add591f3b9b504189356aa2406173f120825aaccfc94dd6d7233876040516107b6929190610cd9565b60405180910390a2505050505050565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b6107f583610861565b604051602001610806929190610d23565b604051602081830303815290604052805190602001209050919050565b6000806001846108339190610c1e565b8385876108409190610d4f565b61084a9190610c1e565b6108549190610dbb565b9050809150509392505050565b600060285b60008111156108dc576001810390507f3031323334353637383961626364656600000000000000000000000000000000600f84161a81536010830492506001810390507f3031323334353637383961626364656600000000000000000000000000000000600f84161a8153601083049250610866565b5060286000209050919050565b6040518060400160405280600061ffff168152602001600060ff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061093a8261090f565b9050919050565b61094a8161092f565b811461095557600080fd5b50565b60008135905061096781610941565b92915050565b6000602082840312156109835761098261090a565b5b600061099184828501610958565b91505092915050565b60008115159050919050565b6109af8161099a565b82525050565b60006020820190506109ca60008301846109a6565b92915050565b600060ff82169050919050565b6109e6816109d0565b81146109f157600080fd5b50565b600081359050610a03816109dd565b92915050565b60008060408385031215610a2057610a1f61090a565b5b6000610a2e85828601610958565b9250506020610a3f858286016109f4565b9150509250929050565b6000819050919050565b610a5c81610a49565b82525050565b6000602082019050610a776000830184610a53565b92915050565b610a868161099a565b8114610a9157600080fd5b50565b600081519050610aa381610a7d565b92915050565b600060208284031215610abf57610abe61090a565b5b6000610acd84828501610a94565b91505092915050565b610adf8161092f565b82525050565b6000602082019050610afa6000830184610ad6565b92915050565b6000604082019050610b156000830185610ad6565b610b226020830184610ad6565b9392505050565b6000606082019050610b3e6000830186610ad6565b610b4b6020830185610ad6565b610b5860408301846109a6565b949350505050565b600061ffff82169050919050565b610b7781610b60565b8114610b8257600080fd5b50565b600081519050610b9481610b6e565b92915050565b600081519050610ba9816109dd565b92915050565b60008060408385031215610bc657610bc561090a565b5b6000610bd485828601610b85565b9250506020610be585828601610b9a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c2982610b60565b9150610c3483610b60565b9250828201905061ffff811115610c4e57610c4d610bef565b5b92915050565b610c5d81610b60565b82525050565b610c6c816109d0565b82525050565b604082016000820151610c886000850182610c54565b506020820151610c9b6020850182610c63565b50505050565b6000606082019050610cb66000830185610ad6565b610cc36020830184610c72565b9392505050565b610cd3816109d0565b82525050565b6000604082019050610cee6000830185610ad6565b610cfb6020830184610cca565b9392505050565b6000819050919050565b610d1d610d1882610a49565b610d02565b82525050565b6000610d2f8285610d0c565b602082019150610d3f8284610d0c565b6020820191508190509392505050565b6000610d5a82610b60565b9150610d6583610b60565b9250828202610d7381610b60565b9150808214610d8557610d84610bef565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dc682610b60565b9150610dd183610b60565b925082610de157610de0610d8c565b5b82820490509291505056fea26469706673582212202e8d38893db7b610a7dbe0834eb242020176609d900ff5f72ad477ff372d87ed64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806366e77fd914610046578063a519fe5d14610076578063f81cd4b014610092575b600080fd5b610060600480360381019061005b919061096d565b6100ae565b60405161006d91906109b5565b60405180910390f35b610090600480360381019061008b919061096d565b61014d565b005b6100ac60048036038101906100a79190610a09565b6101db565b005b6000806100ba836107c6565b90506e0c2e074ec69a0dfb2997ba6c7d2e1e73ffffffffffffffffffffffffffffffffffffffff1663f79fe538826040518263ffffffff1660e01b81526004016101049190610a62565b602060405180830381865afa158015610121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101459190610aa9565b915050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634420e486826040518263ffffffff1660e01b81526004016101a69190610ae5565b600060405180830381600087803b1580156101c057600080fd5b505af11580156101d4573d6000803e3d6000fd5b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b2dd5c07336040518263ffffffff1660e01b81526004016102349190610ae5565b6020604051808303816000875af1158015610253573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102779190610aa9565b6102b857336040517fae2730ca0000000000000000000000000000000000000000000000000000000081526004016102af9190610ae5565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b2dd5c07836040518263ffffffff1660e01b81526004016103119190610ae5565b6020604051808303816000875af1158015610330573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103549190610aa9565b61039557816040517fae2730ca00000000000000000000000000000000000000000000000000000000815260040161038c9190610ae5565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036103fa576040517f7f04724a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060ff168160ff1610806104155750606460ff168160ff16115b1561044c576040517f82e55d7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610455826100ae565b61048b576040517fbe58ee6200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633c8783d933846040518363ffffffff1660e01b81526004016104e6929190610b00565b6020604051808303816000875af1158015610505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105299190610aa9565b15610560576040517f7988071900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c39b3f11338460016040518463ffffffff1660e01b81526004016105be93929190610b29565b600060405180830381600087803b1580156105d857600080fd5b505af11580156105ec573d6000803e3d6000fd5b5050505060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dbb5a0e3856040518263ffffffff1660e01b815260040161064c9190610ae5565b60408051808303816000875af115801561066a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068e9190610baf565b9150915060006106a58260ff16848660ff16610823565b90506106af6108e9565b6001846106bc9190610c1e565b816000019061ffff16908161ffff168152505081816020019060ff16908160ff168152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663084539c587836040518363ffffffff1660e01b815260040161073c929190610ca1565b600060405180830381600087803b15801561075657600080fd5b505af115801561076a573d6000803e3d6000fd5b505050508573ffffffffffffffffffffffffffffffffffffffff167f359b6b955e4279add591f3b9b504189356aa2406173f120825aaccfc94dd6d7233876040516107b6929190610cd9565b60405180910390a2505050505050565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b6107f583610861565b604051602001610806929190610d23565b604051602081830303815290604052805190602001209050919050565b6000806001846108339190610c1e565b8385876108409190610d4f565b61084a9190610c1e565b6108549190610dbb565b9050809150509392505050565b600060285b60008111156108dc576001810390507f3031323334353637383961626364656600000000000000000000000000000000600f84161a81536010830492506001810390507f3031323334353637383961626364656600000000000000000000000000000000600f84161a8153601083049250610866565b5060286000209050919050565b6040518060400160405280600061ffff168152602001600060ff1681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061093a8261090f565b9050919050565b61094a8161092f565b811461095557600080fd5b50565b60008135905061096781610941565b92915050565b6000602082840312156109835761098261090a565b5b600061099184828501610958565b91505092915050565b60008115159050919050565b6109af8161099a565b82525050565b60006020820190506109ca60008301846109a6565b92915050565b600060ff82169050919050565b6109e6816109d0565b81146109f157600080fd5b50565b600081359050610a03816109dd565b92915050565b60008060408385031215610a2057610a1f61090a565b5b6000610a2e85828601610958565b9250506020610a3f858286016109f4565b9150509250929050565b6000819050919050565b610a5c81610a49565b82525050565b6000602082019050610a776000830184610a53565b92915050565b610a868161099a565b8114610a9157600080fd5b50565b600081519050610aa381610a7d565b92915050565b600060208284031215610abf57610abe61090a565b5b6000610acd84828501610a94565b91505092915050565b610adf8161092f565b82525050565b6000602082019050610afa6000830184610ad6565b92915050565b6000604082019050610b156000830185610ad6565b610b226020830184610ad6565b9392505050565b6000606082019050610b3e6000830186610ad6565b610b4b6020830185610ad6565b610b5860408301846109a6565b949350505050565b600061ffff82169050919050565b610b7781610b60565b8114610b8257600080fd5b50565b600081519050610b9481610b6e565b92915050565b600081519050610ba9816109dd565b92915050565b60008060408385031215610bc657610bc561090a565b5b6000610bd485828601610b85565b9250506020610be585828601610b9a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c2982610b60565b9150610c3483610b60565b9250828201905061ffff811115610c4e57610c4d610bef565b5b92915050565b610c5d81610b60565b82525050565b610c6c816109d0565b82525050565b604082016000820151610c886000850182610c54565b506020820151610c9b6020850182610c63565b50505050565b6000606082019050610cb66000830185610ad6565b610cc36020830184610c72565b9392505050565b610cd3816109d0565b82525050565b6000604082019050610cee6000830185610ad6565b610cfb6020830184610cca565b9392505050565b6000819050919050565b610d1d610d1882610a49565b610d02565b82525050565b6000610d2f8285610d0c565b602082019150610d3f8284610d0c565b6020820191508190509392505050565b6000610d5a82610b60565b9150610d6583610b60565b9250828202610d7381610b60565b9150808214610d8557610d84610bef565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dc682610b60565b9150610dd183610b60565b925082610de157610de0610d8c565b5b82820490509291505056fea26469706673582212202e8d38893db7b610a7dbe0834eb242020176609d900ff5f72ad477ff372d87ed64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "hasENS(address)": {
        "notice": "check if the address has an ENS domain associatedthis function only tells if a record was ever set with this address. A more robust check will be done via subgraph"
      },
      "rate(address,uint8)": {
        "notice": "assign a rating to another address with an ENS domain"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1639,
        "contract": "contracts/RateENS.sol:RateENS",
        "label": "drs",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}